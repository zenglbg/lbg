version: '3.8'
 
services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - ./nginx/conf:/usr/local/nginx/conf:cached
      - ./nginx/html:/var/www/html:cached
    ports:
      - "80:80"
      - "3333:3333"
      - "9567:9567"
    restart: unless-stopped
    networks:
      - frontend

  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    ports:
      - '6379:6379'
    restart: unless-stopped
    networks:
      - frontend

  db:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    networks:
      - backend
    # Add "forwardPorts": ["5432"] to **devcontainer.json** to forward PostgreSQL locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)
 
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
      args:
        # Update 'VARIANT' to pick an LTS version of Node.js: 16, 14, 12.
        # Append -bullseye or -buster to pin to an OS version.
        # Use -bullseye variants on local arm64/Apple Silicon.
        VARIANT: "16"
    volumes:
      - ..:/workspace:cached
    tty: true

    # Overrides default command so things don't shut down after the process ends.
    # command: node /workspace/run.js
    command: sleep infinity

    # Runs app on the same network as the database container, allows "forwardPorts" in devcontainer.json function.
    # network_mode: service:db
    networks:
      - backend
      - frontend
      # Uncomment the next line to use a non-root user for all processes.
      # user: node

      # Use "forwardPorts" in **devcontainer.json** to forward an app port locally. 
      # (Adding the "ports" property to this file will not forward from a Codespace.)
      # deploy:
      # command: sh -c "cd /workspace && yarn install && yarn build && yarn prod && sleep infinity"

networks:
  frontend:
  backend:

volumes:
  postgres-data: null
